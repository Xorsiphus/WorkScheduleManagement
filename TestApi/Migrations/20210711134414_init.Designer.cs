// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkScheduleManagement.Data;

namespace TestApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210711134414_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.RequestStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.RequestTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Approver")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RequestStatusesId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequestTypesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequestStatusesId");

                    b.HasIndex("RequestTypesId");

                    b.ToTable("Requests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Request");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.RequestsDetails.OverworkingDays", b =>
                {
                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequestId");

                    b.ToTable("OverworkingDays");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.RequestsDetails.RemotePlans", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkingPlan")
                        .HasColumnType("text");

                    b.HasIndex("RequestId");

                    b.ToTable("RemotePlans");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.VacationTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VacationTypes");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.DayOffInsteadOverworkingRequest", b =>
                {
                    b.HasBaseType("WorkScheduleManagement.Data.Entities.Requests.Request");

                    b.Property<Guid>("Replacer")
                        .HasColumnType("uuid")
                        .HasColumnName("DayOffInsteadOverworkingRequest_Replacer");

                    b.HasDiscriminator().HasValue("DayOffInsteadOverworkingRequest");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.DayOffInsteadVacationRequest", b =>
                {
                    b.HasBaseType("WorkScheduleManagement.Data.Entities.Requests.Request");

                    b.Property<Guid>("Replacer")
                        .HasColumnType("uuid")
                        .HasColumnName("DayOffInsteadVacationRequest_Replacer");

                    b.HasDiscriminator().HasValue("DayOffInsteadVacationRequest");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.HolidayRequest", b =>
                {
                    b.HasBaseType("WorkScheduleManagement.Data.Entities.Requests.Request");

                    b.Property<Guid>("Replacer")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("HolidayRequest");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.RemoteWorkRequest", b =>
                {
                    b.HasBaseType("WorkScheduleManagement.Data.Entities.Requests.Request");

                    b.HasDiscriminator().HasValue("RemoteWorkRequest");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.VacationRequest", b =>
                {
                    b.HasBaseType("WorkScheduleManagement.Data.Entities.Requests.Request");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsShifting")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Replacer")
                        .HasColumnType("uuid")
                        .HasColumnName("VacationRequest_Replacer");

                    b.Property<int?>("VacationTypeId")
                        .HasColumnType("integer");

                    b.HasIndex("VacationTypeId");

                    b.HasDiscriminator().HasValue("VacationRequest");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.Request", b =>
                {
                    b.HasOne("WorkScheduleManagement.Data.Entities.RequestStatuses", "RequestStatuses")
                        .WithMany()
                        .HasForeignKey("RequestStatusesId");

                    b.HasOne("WorkScheduleManagement.Data.Entities.RequestTypes", "RequestTypes")
                        .WithMany()
                        .HasForeignKey("RequestTypesId");

                    b.Navigation("RequestStatuses");

                    b.Navigation("RequestTypes");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.RequestsDetails.OverworkingDays", b =>
                {
                    b.HasOne("WorkScheduleManagement.Data.Entities.Requests.DayOffInsteadOverworkingRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.RequestsDetails.RemotePlans", b =>
                {
                    b.HasOne("WorkScheduleManagement.Data.Entities.Requests.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WorkScheduleManagement.Data.Entities.Requests.VacationRequest", b =>
                {
                    b.HasOne("WorkScheduleManagement.Data.Entities.VacationTypes", "VacationType")
                        .WithMany()
                        .HasForeignKey("VacationTypeId");

                    b.Navigation("VacationType");
                });
#pragma warning restore 612, 618
        }
    }
}
